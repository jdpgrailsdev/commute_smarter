apply plugin: 'application'
apply plugin: 'findbugs'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.node'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.11'
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    jettyVersion = '9.2.16.v20160414'
    newrelicAgentVersion = '3.27.0'
    springBootVersion = '1.3.5.RELEASE'
    springVersion = '4.2.6.RELEASE'
    reactOutputDir = getReactOutputDir(project)
    reactSourceFiles = getReactSourceFiles(project)
}

configurations {
    agent
    agentExtensions
}

findbugs {
    ignoreFailures = true
    reportLevel = 'low'
}

findbugsMain {
    reports {
        html.enabled = true
        xml.enabled = false
    }
}

jacoco {
  toolVersion = '0.7.5.201505241946'
}

node {
    nodeModulesDir = file("${project.projectDir}")
}

run {
    environment = ['PORT' : project.serverPort, 'SPRING_PROFILES_ACTIVE' : 'development', 'GOOGLE_API_KEY' : System.getenv('GOOGLE_API_KEY')]
    jvmArgs = ['-Duser.timezone=UTC', '-Dnewrelic.enable.java.8', '-XX:+UseG1GC', "-Dnewrelic.environment=${System.getenv('SPRING_PROFILES_ACTIVE') ?: 'development'}"]
    mainClassName = project.mainClass
}

springBoot {
    mainClass = project.mainClass
    agent = file("$buildDir/agent/newrelic.jar")
}

project.afterEvaluate {
    configurations.all { configuration ->
        configuration.getIncoming().beforeResolve {
            configuration.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if(details.requested.group == 'org.springframework.boot') {
                    details.useVersion springBootVersion
                    project.logger.debug "Forced artifact to ${details.requested.group}:${details.requested.name}:${springBootVersion}"
                } else if(details.requested.group == 'org.springframework') {
                    details.useVersion springVersion
                    project.logger.debug "Forced artifact to ${details.requested.group}:${details.requested.name}:${springVersion}"
                } else if(details.requested.group == 'org.eclipse.jetty') {
                    details.useVersion jettyVersion
                    project.logger.debug "Forced artifact to ${details.requested.group}:${details.requested.name}:${jettyVersion}"
                } else {
                    project.logger.debug "Artifact ${details.requested.group}:${details.requested.name}:${details.requested.version} does not match any Spring groups.  Nothing to force."
                }
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' } // For Java 8 compatible CGLIB
}

dependencies {
    agent "com.newrelic.agent.java:newrelic-agent:${newrelicAgentVersion}"

    compile 'commons-io:commons-io:2.4'
    compile 'com.google.auto.value:auto-value:1.1'
    compile "com.newrelic.agent.java:newrelic-api:${newrelicAgentVersion}"
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.eclipse.jetty:jetty-jmx:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-util:${jettyVersion}"

    runtime "org.eclipse.jetty:jetty-http:${jettyVersion}"
    runtime "org.eclipse.jetty:jetty-servlets:${jettyVersion}"
    runtime ("org.eclipse.jetty:jetty-webapp:${jettyVersion}") {
        exclude module: 'jetty-server'
    }
    runtime "org.eclipse.jetty.websocket:websocket-server:${jettyVersion}"
    runtime "org.eclipse.jetty.websocket:javax-websocket-server-impl:${jettyVersion}"
    runtime 'org.jolokia:jolokia-core:1.2.3'
    runtime ("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}") {
        exclude module: 'jetty-server'
    }

    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testCompile "org.springframework:spring-test:${springVersion}"
}

task buildDist(type: Tar, group:'Build', description: 'Builds the Tar distribution of the project.') {
    archiveName = "${project.archivesBaseName ?: project.name}.tar"
    from(jar.outputs.files) {
      into('libs')
    }
    from("$buildDir/agent") {
        into('agent')
    }
    from('config') {
      into('config')
      exclude('newrelic.yml')
    }
    from('bin') {
      into('bin')
    }
}

task copyAgent(type: Copy, group:'Build', description: 'Retrieves the latest New Relic Java agent library.') {
    from {
        configurations.agent
    }
    from('config') {
        include 'newrelic.yml'
    }
    into "$buildDir/agent"
    rename('newrelic-(?:agent|java)-(.*).jar', 'newrelic.jar')
}

task copyAgentExtensions(type: Copy, group:'Build', description: 'Includes New Relic Java agent extensions in the distribution.', dependsOn: 'copyAgent') {
    from {
        configurations.agentExtensions
    }
    from('config/agent-extensions') {
        include '*.yml'
    }
    into "$buildDir/agent/extensions"
}

task generateGitProperties {
    doLast {
        try {
            def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
            def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
            def commitHash = revision.split(' ').last()
            def timestamp = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd'T'HH:mm:ssZ") : null

            File resourcesDir = new File(project.getBuildDir(), 'resources/main')
            File propertiesFile = new File(resourcesDir, 'git.properties')

            if(timestamp) {
                // The project may not have any resources, so create the directories and file
                if(!propertiesFile.exists()) {
                    resourcesDir.mkdirs()
                    propertiesFile.createNewFile()
                }
                propertiesFile.text = """git.branch=${branch}
        git.commit.id=${commitHash}
        git.commit.time=${timestamp}
                """
            } else {
               project.logger.error('Unable to generate Git properties file:  revision could not be retrieved from Git.')
            }
        } catch (e) {
            project.logger.error('Unable to generate Git properties file.', e)
        }
    }
}

task installReact(type:com.moowork.gradle.node.task.NpmInstallTask) {
    args = '--save browserify react react-dom react-google-maps babelify babel-preset-react'.split(' ') as List
}

task bundleReact(type:Exec, dependsOn:['installReact']) {
    commandLine = 'browserify'
    args = "-t [ babelify --presets [ react ] ] ${reactSourceFiles.join(' ').trim()} -o ${reactOutputDir}/bundle.js".split(' ') as List
}

build.finalizedBy(project.tasks.buildDist)

// `copyAgent` is defined in `package.gradle`.
project.tasks.run.dependsOn(['bundleReact', 'copyAgentExtensions'])

// Generate the Git commit properties file prior to building the artifact
project.tasks.processResources.finalizedBy([project.tasks.generateGitProperties])

// Distribution build depends on JAR and agent copy tasks
project.tasks.buildDist.dependsOn(['bundleReact', 'build', 'copyAgentExtensions'])

project.tasks.installReact.outputs.upToDateWhen { false }

def getReactSourceFiles(project) {
    def reactSourceFiles = []
    new File(project.projectDir, 'src/main/react').eachFileRecurse(groovy.io.FileType.FILES) { file ->
        reactSourceFiles << file
    }
    reactSourceFiles
}

def getReactOutputDir(project) {
    def outputDir = new File(project.projectDir, 'src/main/resources/static/js/react')
    if(!outputDir.exists()) {
        outputDir.mkdirs()
    }
    outputDir
}